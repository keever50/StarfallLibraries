--@name async example game
--@author
--@shared
--@include async.txt

if CLIENT then
    --Get the library
    async = require("async.txt")
    
    --This is for later
    counterA = 0
    counterB = 0
    
    --First, we define the functions before we create the threads. We need to give them instructions.
    function MessageA()
        local counter = 0 --We can use local variables ^^ 
        while true do --Set up your loop, but do not forget something to "throttle" it. perf, perf2, yield and wait are good ones
            async.wait(math.random(0.1,1.5)) --Wait in seconds
            
            print("Message A: " .. counter)  
            
            counter = counter + 1 
            counterA = counter 
        end
    end
    
    function MessageB()
        local counter = 0 
        while true do
            async.wait(math.random(0.1,1.5))
            
            print("   Message B: " .. counter)  
            
            counter = counter + 1  
            counterB = counter
        end
    end


    --Create the threads. They are still sleeping, so we have to wake them up with :run() later
    ThreadA = async.thread.create(MessageA)  
    ThreadB = async.thread.create(MessageB)

    --Create the game thread, directly defining the function, running them at the same time.
    async.thread.create(function()
        print("Main thread started... See which thread will win this race by going over 10")
        
        --Lets run the threads!
        
        ThreadA:run() --You can actually pass data into the run(). run("Please read this") and this is passed to the function inside
        --You want to pass more data but this is later? :update("Please read this. It's different now") 
        ThreadA.name = "Player A" --You can name threads if you want. It's not required, but makes looking them up easier in thread.pool. The more you know
        print("Thread A, go") 
        
        ThreadB:run()
        ThreadA.name = "Player B"
        print("Thread B, go")
        
        
        while true do
            async.perf2(20, false) --I only want 20uS of server time used. perf() without the 2 makes the thread wait in precentages. 
            if counterA > 10 then
                print("Thread A won!")
                break
            end
            if counterB > 10 then
                print("Thread B won!")
                break
            end         
        end
        
        --You can call stop() to stop the threads. Wow
        print("Closing all threads")
        ThreadA:stop()
        ThreadB:stop()
        
        --Thread closes automatically when it reached its end.
        print("Exiting main thread. Closing race")       
        
    end):run() --Called :run() right after creation. No need to store this thread 
        
            

end