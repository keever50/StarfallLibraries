--@name async
--@author Aeralius
--@shared


--perf. Same as used in expression 2. perf( max usage in % ). Returns true when yielded.            
local function perf(use, optimal)
    if quotaUsed() >= quotaMax()*(use/100) then
        try(function() coroutine.yield() end, function( )
            if optimal == false then
                throw("Must be in a thread to run. ",  1, false)    
            end
        end)
        return true
    else
        return false    
    end
end  

--perf2. Same as normal perf, but it takes cpu time instead.        
local function perf2(cpu, optimal)
    if quotaUsed()*1000000 >= cpu then
        try(function() coroutine.yield() end, function(  )
            if optimal == false then
                throw("Must be in a thread to run. ", 1, false )    
            end
        end)
        return true
    else
        return false    
    end
end  

local thread = {}
thread.pool = {}
thread.running = coroutine.running
thread.create = function( func ) 
    local thr = 
    {
        args = {},
        running = false,
        co = coroutine.create(func),
        name = "unnamed_thread",
        run = function(this, ... )
            if this.running == false then
                this.args = {...}
                this.running = true
                thread.pool[tostring(this.co)] = this
                
            end
        end,
        stop = function(this)
            if this.running == true then
                this.running = false
                thread.pool[tostring(this.co)] = nil 
            end
        end,
        update = function(this, ...)
            this.args = {...}    
        end,
        onExit = function( ) end,
        onYield = function( ) end,
        onReturn = function( ) end
    }
    return thr
end


hook.add("tick","async_threading", function( )
    for k, v in pairs(thread.pool) do
        if v.args == nil then continue end
        if coroutine.status(v.co) != "suspended" then thread.pool[k].onExit(thread.pool[k].Return) thread.pool[k] = nil continue end
        if coroutine.status(v.co) == "suspended" then
            thread.pool[k].onYield(thread.pool[k].Return)
            if thread.pool[k].Return != nil then
                thread.pool[k].onReturn(thread.pool[k].Return)    
            end
        end
        try(function() thread.pool[k].Return = coroutine.resume(v.co, unpack(v.args)) end, function( err ) 
            print(  err )    
        end)
    end
end)

return
{
    perf = perf, 
    perf2 = perf2,
    thread = thread,
    wait = coroutine.wait,
    yield = coroutine.yield
} 